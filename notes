Required MongoMemoryServer Updates
In the upcoming lecture, we will be setting up our test environment with MongoMemoryServer. If you are using the latest versions of this library a few changes will be required:

In auth/src/test/setup.ts, change these lines:

  mongo = new MongoMemoryServer();
  const mongoUri = await mongo.getUri();
to this:

  const mongo = await MongoMemoryServer.create();
  const mongoUri = mongo.getUri();


Remove the useNewUrlParser and useUnifiedTopology parameters from the connect method. Change this:

  await mongoose.connect(mongoUri, {
    useNewUrlParser: true,
    useUnifiedTopology: true,
  });
to this:

  await mongoose.connect(mongoUri, {});


Then, find the afterAll hook and add a conditional check:

afterAll(async () => {
  if (mongo) {
    await mongo.stop();
  }
  await mongoose.connection.close();
});


For reference:

https://nodkz.github.io/mongodb-memory-server/docs/guides/migration/migrate7/https://nodkz.github.io/mongodb-memory-server/docs/guides/migration/migrate7/



In the upcoming lecture (and later with the ticketing, orders and payments services) you may end up seeing a TS error like this in your test/setup.ts file:

Element implicitly has an 'any' type because type 'typeof globalThis' has no index signature.ts(7017)

To fix, find the following lines of code in src/test/setup.ts:

declare global {
  namespace NodeJS {
    export interface Global {
      signin(): Promise<string[]>;
    }
  }
}
change to:

    declare global {
      var signin: () => Promise<string[]>;
    }
    

Suggestion Regarding a Default Export Warning

In the upcoming lecture, we will create our first components and run the Next server. You may see a warning in the terminal or browser console:

Anonymous arrow functions cause Fast Refresh to not preserve local component state.

Please add a name to your function, for example:

Before

export default () => <div />;

After

const Named = () => <div />;

export default Named;

This is a linter warning as of React v17 letting us know that it might be wise to use named exports instead.

You can suppress the warning by refactoring from this:

export default () => {
  return <h1>Landing Page</h1>;
};
to this:

const Landing = () => {
  return <h1>Landing Page</h1>;
};
  
export default Landing;
The warning will come up a few more times in this project (and throughout the course) when creating components and can be handled similarly.




Small Update for Custom Webpack Config
In the upcoming lecture, we will be creating a next.config.js file and adding some configuration to it. The latest versions of Next.js use a newer version of Webpack which moves watchOptions out from webpackDevMiddleware.

So, the next.config.js file should now look like this:

module.exports = {
  webpack: (config) => {
    config.watchOptions.poll = 300;
    return config;
  },
};


Note - If you are using the Next.js / React app and versions from the course resources this change does not apply.